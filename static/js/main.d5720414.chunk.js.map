{"version":3,"sources":["pages/About.js","components/LoadButton.js","model/classes.js","config.js","pages/Detect.js","pages/NotFound.js","Routes.js","components/AlertDismissable.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Component","isLoading","text","loadingText","disabled","props","Button","Spinner","as","animation","size","role","aria-hidden","MODEL_CLASSES","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","Modal1","useState","show","setShow","handleClose","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","Detect","initWebcam","a","tf","webcam","refs","resizeWidth","resizeHeight","facingMode","noWebcam","style","display","startWebcam","start","stopWebcam","stop","getModelInfo","fetch","config","method","then","response","json","data","modelLastUpdated","last_updated","catch","err","console","log","updateModel","setState","isDownloadingModel","model","save","modelUpdateAvailable","showModelUpdateAlert","showModelUpdateSuccess","classifyLocalImage","isClassifying","croppedCanvas","cropper","getCroppedCanvas","image","fromPixels","toFloat","processImage","imageData","resizedImage","resizeBilinear","logits","predict","probabilities","getTopKClasses","preds","predictions","photoSettingsOpen","state","context","canvas","getContext","ratioX","width","ratioY","height","ratio","Math","min","clearRect","drawImage","dispose","classifyWebcamImage","capture","imageCapture","resized","tensorData","div","toPixels","expandDims","sub","values","topK","valuesAndIndices","i","length","push","value","index","sort","b","topkValues","Float32Array","topkIndices","Int32Array","topClassesAndProbs","probability","toFixed","handlePanelClick","event","handleFileChange","target","files","file","URL","createObjectURL","filename","name","handleTabSelect","activeKey","modelLoaded","isModelLoading","showModal","window","this","openDB","db","transaction","objectStore","get","item","dateSaved","Date","modelArtifactsInfo","getTime","warn","e","aria-controls","aria-expanded","Collapse","in","id","Container","Alert","onClose","dismissible","modelType","Tabs","defaultActiveKey","onSelect","Tab","eventKey","title","ref","autoPlay","playsInline","muted","LoadButton","Form","Group","controlId","Label","Control","onChange","type","accept","src","guides","aspectRatio","viewMode","color","fontWeight","ListGroup","map","category","Item","key","alt","href","process","childProps","path","exact","component","About","NotFound","AlertDismissable","dangerouslySetInnerHTML","__html","message","App","dismissUpdateAlert","showUpdateAlert","reloadMsg","Navbar","collapseOnSelect","expand","Brand","Toggle","Nav","to","updateAvailable","paddingTop","Routes","withRouter","isLocalhost","Boolean","location","hostname","match","register","navigator","origin","addEventListener","swUrl","headers","contentType","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","Index","contentCached","handleUpdate","waitingServiceWorker","waiting","postMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5720414.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './About.css';\n\n/**\n * Class to handle the rendering of the Home page.\n * @extends React.Component\n */\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"About container\">\n        <h1>About</h1>\n        <p>\n          Use this website to identify your favorite Gen 1 Pokémon! \n          <br></br> - Models images of pokemon using MobileNet to a 86% accuracy\n          <br></br>\n          <br></br>\n          Please don't sue me Nintendo\n        </p>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Button, Spinner } from 'react-bootstrap';\n\n/**\n * This produces a button that will have a loading animation while the isLoading property is true.\n */\nexport default ({\n  isLoading,\n  text,\n  loadingText,\n  className = '',\n  disabled = false,\n  ...props\n}) =>\n  <Button\n    className={`LoadButton ${className}`}\n    disabled={disabled || isLoading}\n    {...props}\n  >\n    {isLoading && <Spinner\n      as=\"span\"\n      animation=\"border\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />}{' '}\n    {isLoading ? loadingText : text}\n  </Button>;","/* eslint-disable */\n// Theses classes should correspond to the softmax output of your model.\n\nexport const MODEL_CLASSES = {\n    0: '#063 | Abra |',\n    1: '#142 | Aerodactyl |',\n    2: '#065 | Alakazam |',\n    3: '#024 | Arbok |',\n    4: '#059 | Arcanine |',\n    5: '#144 | Articuno |',\n    6: '#015 | Beedrill |',\n    7: '#069 | Bellsprout |',\n    8: '#009 | Blastoise |',\n    9: '#001 | Bulbasaur |',\n    10: '#012 | Butterfree |',\n    11: '#010 | Caterpie |',\n    12: '#113 | Chansey |',\n    13: '#006 | Charizard |',\n    14: '#004 | Charmander |',\n    15: '#005 | Charmeleon |',\n    16: '#036 | Clefable |',\n    17: '#035 | Clefairy |',\n    18: '#091 | Cloyster |',\n    19: '#104 | Cubone |',\n    20: '#087 | Dewgong |',\n    21: '#050 | Diglett |',\n    22: '#132 | Ditto |',\n    23: '#085 | Dodrio |',\n    24: '#084 | Doduo |',\n    25: '#148 | Dragonair |',\n    26: '#149 | Dragonite |',\n    27: '#147 | Dratini |',\n    28: '#096 | Drowzee |',\n    29: '#051 | Dugtrio |',\n    30: '#133 | Eevee |',\n    31: '#023 | Ekans |',\n    32: '#125 | Electabuzz |',\n    33: '#101 | Electrode |',\n    34: '#102 | Exeggcute |',\n    35: '#103 | Exeggutor |',\n    36: '#083 | Farfetchd |',\n    37: '#022 | Fearow |',\n    38: '#136 | Flareon |',\n    39: '#092 | Gastly |',\n    40: '#094 | Gengar |',\n    41: '#074 | Geodude |',\n    42: '#044 | Gloom |',\n    43: '#042 | Golbat |',\n    44: '#118 | Goldeen |',\n    45: '#055 | Golduck |',\n    46: '#076 | Golem |',\n    47: '#075 | Graveler |',\n    48: '#088 | Grimer |',\n    49: '#058 | Growlithe |',\n    50: '#130 | Gyarados |',\n    51: '#093 | Haunter |',\n    52: '#107 | Hitmonchan |',\n    53: '#106 | Hitmonlee |',\n    54: '#116 | Horsea |',\n    55: '#097 | Hypno |',\n    56: '#002 | Ivysaur |',\n    57: '#039 | Jigglypuff |',\n    58: '#135 | Jolteon |',\n    59: '#124 | Jynx |',\n    60: '#140 | Kabuto |',\n    61: '#141 | Kabutops |',\n    62: '#064 | Kadabra |',\n    63: '#014 | Kakuna |',\n    64: '#115 | Kangaskhan |',\n    65: '#099 | Kingler |',\n    66: '#109 | Koffing |',\n    67: '#098 | Krabby |',\n    68: '#131 | Lapras |',\n    69: '#108 | Lickitung |',\n    70: '#068 | Machamp |',\n    71: '#067 | Machoke |',\n    72: '#066 | Machop |',\n    73: '#129 | Magikarp |',\n    74: '#126 | Magmar |',\n    75: '#081 | Magnemite |',\n    76: '#082 | Magneton |',\n    77: '#056 | Mankey |',\n    78: '#105 | Marowak |',\n    79: '#052 | Meowth |',\n    80: '#011 | Metapod |',\n    81: '#151 | Mew |',\n    82: '#150 | Mewtwo |',\n    83: '#146 | Moltres |',\n    84: '#122 | Mr. Mime |',\n    85: '#089 | Muk |',\n    86: '#034 | Nidoking |',\n    87: '#031 | Nidoqueen |',\n    88: '#030 | Nidorina |',\n    89: '#033 | Nidorino |',\n    90: '#038 | Ninetales |',\n    91: '#043 | Oddish |',\n    92: '#138 | Omanyte |',\n    93: '#139 | Omastar |',\n    94: '#095 | Onix |',\n    95: '#046 | Paras |',\n    96: '#047 | Parasect |',\n    97: '#053 | Persian |',\n    98: '#018 | Pidgeot |',\n    99: '#017 | Pidgeotto |',\n    100: '#016 | Pidgey |',\n    101: '#025 | Pikachu |',\n    102: '#127 | Pinsir |',\n    103: '#060 | Poliwag |',\n    104: '#061 | Poliwhirl |',\n    105: '#062 | Poliwrath |',\n    106: '#077 | Ponyta |',\n    107: '#137 | Porygon |',\n    108: '#057 | Primeape |',\n    109: '#054 | Psyduck |',\n    110: '#026 | Raichu |',\n    111: '#078 | Rapidash |',\n    112: '#020 | Raticate |',\n    113: '#019 | Rattata |',\n    114: '#112 | Rhydon |',\n    115: '#111 | Rhyhorn |',\n    116: '#027 | Sandshrew |',\n    117: '#028 | Sandslash |',\n    118: '#123 | Scyther |',\n    119: '#117 | Seadra |',\n    120: '#119 | Seaking |',\n    121: '#086 | Seel |',\n    122: '#090 | Shellder |',\n    123: '#080 | Slowbro |',\n    124: '#079 | Slowpoke |',\n    125: '#143 | Snorlax |',\n    126: '#021 | Spearow |',\n    127: '#007 | Squirtle |',\n    128: '#121 | Starmie |',\n    129: '#120 | Staryu |',\n    130: '#114 | Tangela |',\n    131: '#128 | Tauros |',\n    132: '#072 | Tentacool |',\n    133: '#073 | Tentacruel |',\n    134: '#134 | Vaporeon |',\n    135: '#049 | Venomoth |',\n    136: '#048 | Venonat |',\n    137: '#003 | Venusaur |',\n    138: '#071 | Victreebel |',\n    139: '#045 | Vileplume |',\n    140: '#100 | Voltorb |',\n    141: '#037 | Vulpix |',\n    142: '#008 | Wartortle |',\n    143: '#013 | Weedle |',\n    144: '#070 | Weepinbell |',\n    145: '#110 | Weezing |',\n    146: '#040 | Wigglytuff |',\n    147: '#145 | Zapdos |',\n    148: '#041 | Zubat |',\n  };","export default {\n  API_ENDPOINT: 'http://localhost:5000/api',\n  // API_ENDPOINT: 'https://[YOUR-ROUTE].mybluemix.net/api'\n};\n","import React, { Component, Fragment } from 'react';\nimport {\n  Alert, Button, Collapse, Container, Form, Spinner, ListGroup, Tabs, Tab\n} from 'react-bootstrap';\nimport { FaCamera, FaChevronDown, FaChevronRight } from 'react-icons/fa';\nimport { openDB } from 'idb';\nimport Cropper  from 'react-cropper';\nimport * as tf from '@tensorflow/tfjs';\nimport LoadButton from '../components/LoadButton';\nimport { MODEL_CLASSES } from '../model/classes';\nimport config from '../config';\nimport './Detect.css';\nimport 'cropperjs/dist/cropper.css';\n\n//import Modal from '../components/ModalForm';\n//import { white } from 'color-name';\nimport {useState} from 'react';\nimport {Modal} from 'react-bootstrap';\n\n\nconst MODEL_PATH = './model/model.json';\nconst IMAGE_SIZE = 224;\nconst CANVAS_SIZE = 224;\nconst TOPK_PREDICTIONS = 4;\n\nconst INDEXEDDB_DB = 'tensorflowjs';\nconst INDEXEDDB_STORE = 'model_info_store';\nconst INDEXEDDB_KEY = 'web-model';\n\nfunction Modal1() {\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n      <strong>WRONG: Tap to make correction</strong>\n      </Button>\n\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>CORRECTION?!?!</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Place Holder</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\n/**\n * Class to handle the rendering of the Detect page.\n * @extends React.Component\n */\nexport default class Detect extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.webcam = null;\n    this.model = null;\n    this.modelLastUpdated = null;\n\n    this.state = {\n      modelLoaded: false,\n      filename: '',\n      isModelLoading: false,\n      isClassifying: false,\n      predictions: [],\n      photoSettingsOpen: true,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: false,\n      isDownloadingModel: false,\n      showModal: false\n    };\n  }\n\n  async componentDidMount() {\n    if (('indexedDB' in window)) {\n      try {\n        this.model = await tf.loadLayersModel('indexeddb://' + INDEXEDDB_KEY);\n\n        // Safe to assume tensorflowjs database and related object store exists.\n        // Get the date when the model was saved.\n        try {\n          const db = await openDB(INDEXEDDB_DB, 1, );\n          const item = await db.transaction(INDEXEDDB_STORE)\n                               .objectStore(INDEXEDDB_STORE)\n                               .get(INDEXEDDB_KEY);\n          const dateSaved = new Date(item.modelArtifactsInfo.dateSaved);\n          await this.getModelInfo();\n          console.log(this.modelLastUpdated);\n          if (!this.modelLastUpdated  || dateSaved >= new Date(this.modelLastUpdated).getTime()) {\n            console.log('Using saved model');\n          }\n          else {\n            this.setState({\n              modelUpdateAvailable: true,\n              showModelUpdateAlert: true,\n            });\n          }\n\n        }\n        catch (error) {\n          console.warn(error);\n          console.warn('Could not retrieve when model was saved.');\n        }\n\n      }\n      // If error here, assume that the object store doesn't exist and the model currently isn't\n      // saved in IndexedDB.\n      catch (error) {\n        console.log('Not found in IndexedDB. Loading and saving...');\n        console.log(error);\n        this.model = await tf.loadLayersModel(MODEL_PATH);\n        await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n      }\n    }\n    // If no IndexedDB, then just download like normal.\n    else {\n      console.warn('IndexedDB not supported.');\n      this.model = await tf.loadLayersModel(MODEL_PATH);\n    }\n\n    this.setState({ modelLoaded: true });\n    this.initWebcam();\n\n    // Warm up model.\n    let prediction = tf.tidy(() => this.model.predict(tf.zeros([1, IMAGE_SIZE, IMAGE_SIZE, 3])));\n    prediction.dispose();\n  }\n\n  async componentWillUnmount() {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n\n    // Attempt to dispose of the model.\n    try {\n      this.model.dispose();\n    }\n    catch (e) {\n      // Assume model is not loaded or already disposed.\n    }\n  }\n\n  initWebcam = async () => {\n    try {\n      this.webcam = await tf.data.webcam(\n        this.refs.webcam,\n        {resizeWidth: CANVAS_SIZE, resizeHeight: CANVAS_SIZE, facingMode: 'environment'}\n      );\n    }\n    catch (e) {\n      this.refs.noWebcam.style.display = 'block';\n    }\n  }\n\n  startWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.start();\n    }\n  }\n\n  stopWebcam = async () => {\n    if (this.webcam) {\n      this.webcam.stop();\n    }\n  }\n\n  getModelInfo = async () => {\n    await fetch(`${config.API_ENDPOINT}/model_info`, {\n      method: 'GET',\n    })\n    .then(async (response) => {\n      await response.json().then((data) => {\n        this.modelLastUpdated = data.last_updated;\n      })\n      .catch((err) => {\n        console.log('Unable to get parse model info.');\n      });\n    })\n    .catch((err) => {\n      console.log('Unable to get model info');\n    });\n  }\n\n  updateModel = async () => {\n    // Get the latest model from the server and refresh the one saved in IndexedDB.\n    console.log('Updating the model: ' + INDEXEDDB_KEY);\n    this.setState({ isDownloadingModel: true });\n    this.model = await tf.loadLayersModel(MODEL_PATH);\n    await this.model.save('indexeddb://' + INDEXEDDB_KEY);\n    this.setState({\n      isDownloadingModel: false,\n      modelUpdateAvailable: false,\n      showModelUpdateAlert: false,\n      showModelUpdateSuccess: true\n    });\n  }\n\n  classifyLocalImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const croppedCanvas = this.refs.cropper.getCroppedCanvas();\n    const image = tf.tidy( () => tf.browser.fromPixels(croppedCanvas).toFloat());\n\n    // Process and resize image before passing in to model.\n    const imageData = await this.processImage(image);\n    const resizedImage = tf.image.resizeBilinear(imageData, [IMAGE_SIZE, IMAGE_SIZE]);\n\n    const logits = this.model.predict(resizedImage);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const context = this.refs.canvas.getContext('2d');\n    const ratioX = CANVAS_SIZE / croppedCanvas.width;\n    const ratioY = CANVAS_SIZE / croppedCanvas.height;\n    const ratio = Math.min(ratioX, ratioY);\n    context.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n    context.drawImage(croppedCanvas, 0, 0,\n                      croppedCanvas.width * ratio, croppedCanvas.height * ratio);\n\n    // Dispose of tensors we are finished with.\n    image.dispose();\n    imageData.dispose();\n    resizedImage.dispose();\n    logits.dispose();\n  }\n\n  classifyWebcamImage = async () => {\n    this.setState({ isClassifying: true });\n\n    const imageCapture = await this.webcam.capture();\n\n    const resized = tf.image.resizeBilinear(imageCapture, [IMAGE_SIZE, IMAGE_SIZE]);\n    const imageData = await this.processImage(resized);\n    const logits = this.model.predict(imageData);\n    const probabilities = await logits.data();\n    const preds = await this.getTopKClasses(probabilities, TOPK_PREDICTIONS);\n\n    this.setState({\n      predictions: preds,\n      isClassifying: false,\n      photoSettingsOpen: !this.state.photoSettingsOpen\n    });\n\n    // Draw thumbnail to UI.\n    const tensorData = tf.tidy(() => imageCapture.toFloat().div(255));\n    await tf.browser.toPixels(tensorData, this.refs.canvas);\n\n    // Dispose of tensors we are finished with.\n    resized.dispose();\n    imageCapture.dispose();\n    imageData.dispose();\n    logits.dispose();\n    tensorData.dispose();\n  }\n\n  processImage = async (image) => {\n    return tf.tidy(() => image.expandDims(0).toFloat().div(127).sub(1));\n  }\n\n  /**\n   * Computes the probabilities of the topK classes given logits by computing\n   * softmax to get probabilities and then sorting the probabilities.\n   * @param logits Tensor representing the logits from MobileNet.\n   * @param topK The number of top predictions to show.\n   */\n  getTopKClasses = async (values, topK) => {\n    const valuesAndIndices = [];\n    for (let i = 0; i < values.length; i++) {\n      valuesAndIndices.push({value: values[i], index: i});\n    }\n    valuesAndIndices.sort((a, b) => {\n      return b.value - a.value;\n    });\n    const topkValues = new Float32Array(topK);\n    const topkIndices = new Int32Array(topK);\n    for (let i = 0; i < topK; i++) {\n      topkValues[i] = valuesAndIndices[i].value;\n      topkIndices[i] = valuesAndIndices[i].index;\n    }\n    const topClassesAndProbs = [];\n    for (let i = 0; i < topkIndices.length; i++) {\n      topClassesAndProbs.push({\n        className: MODEL_CLASSES[topkIndices[i]],\n        probability: (topkValues[i] * 100).toFixed(2)\n      });\n    }\n\n    return topClassesAndProbs;\n  }\n\n  handlePanelClick = event => {\n    this.setState({ photoSettingsOpen: !this.state.photoSettingsOpen });\n  }\n\n  handleFileChange = event => {\n    if (event.target.files && event.target.files.length > 0) {\n      this.setState({\n        file: URL.createObjectURL(event.target.files[0]),\n        filename: event.target.files[0].name\n      });\n    }\n  }\n\n  handleTabSelect = activeKey => {\n    switch(activeKey) {\n      case 'camera':\n        this.startWebcam();\n        break;\n      case 'localfile':\n        this.setState({filename: null, file: null});\n        this.stopWebcam();\n        break;\n      default:\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Classify container\" >\n\n      { !this.state.modelLoaded &&\n        <Fragment>\n          <Spinner animation=\"border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          {' '}<span className=\"loading-model-text\">Loading Model</span>\n        </Fragment>\n      }\n\n      { this.state.modelLoaded &&\n        <Fragment>\n        <Button\n          onClick={this.handlePanelClick}\n          className=\"classify-panel-header\"\n          aria-controls=\"photo-selection-pane\"\n          aria-expanded={this.state.photoSettingsOpen}\n          >\n\n          Tap Here to Detect a Pokemon!\n            <span className='panel-arrow'>\n            { this.state.photoSettingsOpen\n              ? <FaChevronDown />\n              : <FaChevronRight />\n            }\n            </span>\n          </Button>\n          <Collapse in={this.state.photoSettingsOpen}>\n            <div id=\"photo-selection-pane\">\n            { this.state.modelUpdateAvailable && this.state.showModelUpdateAlert &&\n                <Container>\n                  <Alert\n                    variant=\"info\"\n                    show={this.state.modelUpdateAvailable && this.state.showModelUpdateAlert}\n                    onClose={() => this.setState({ showModelUpdateAlert: false})}\n                    dismissible>\n                      An update for the <strong>{this.state.modelType}</strong> model is available.\n                      <div className=\"d-flex justify-content-center pt-1\">\n                        {!this.state.isDownloadingModel &&\n                          <Button onClick={this.updateModel}\n                                  variant=\"outline-info\">\n                            Update\n                          </Button>\n                        }\n                        {this.state.isDownloadingModel &&\n                          <div>\n                            <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n                              <span className=\"sr-only\">Downloading...</span>\n                            </Spinner>\n                            {' '}<strong>Downloading...</strong>\n                          </div>\n                        }\n                      </div>\n                  </Alert>\n                </Container>\n              }\n              {this.state.showModelUpdateSuccess &&\n                <Container>\n                  <Alert variant=\"success\"\n                         onClose={() => this.setState({ showModelUpdateSuccess: false})}\n                         dismissible>\n                    The <strong>{this.state.modelType}</strong> model has been updated!\n                  </Alert>\n                </Container>\n              }\n            <Tabs defaultActiveKey=\"camera\" id=\"input-options\" onSelect={this.handleTabSelect}\n                  className=\"justify-content-center\">\n              <Tab eventKey=\"camera\" title=\"Take Photo\">\n                <div id=\"no-webcam\" ref=\"noWebcam\">\n                  <span className=\"camera-icon\"><FaCamera /></span>\n                  No camera found. <br />\n                  Please use a device with a camera, or upload an image instead.\n                </div>\n                <div className=\"webcam-box-outer\">\n                  <div className=\"webcam-box-inner\">\n                    <video ref=\"webcam\" autoPlay playsInline muted id=\"webcam\"\n                           width=\"448\" height=\"448\">\n                    </video>\n                  </div>\n                </div>\n                <div className=\"button-container\">\n                  <LoadButton\n                    variant=\"primary\"\n                    size=\"lg\"\n                    onClick={this.classifyWebcamImage}\n                    isLoading={this.state.isClassifying}\n                    text=\"Detect\"\n                    loadingText=\"Detecting...\"\n                  />\n                </div>\n              </Tab>\n              <Tab eventKey=\"localfile\" title=\"Select Local File\">\n                <Form.Group controlId=\"file\">\n                  <Form.Label>Select Image File</Form.Label><br />\n                  <Form.Label className=\"imagelabel\">\n                    {this.state.filename ? this.state.filename : 'Browse...'}\n                  </Form.Label>\n                  <Form.Control\n                    onChange={this.handleFileChange}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    className=\"imagefile\" />\n                </Form.Group>\n                { this.state.file &&\n                  <Fragment>\n                    <div id=\"local-image\">\n                      <Cropper\n                        ref=\"cropper\"\n                        src={this.state.file}\n                        style={{height: 400, width: '100%'}}\n                        guides={true}\n                        aspectRatio={1 / 1}\n                        viewMode={2}\n                      />\n                    </div>\n                    <div className=\"button-container\">\n                      <LoadButton\n                        variant=\"primary\"\n                        size=\"lg\"\n                        disabled={!this.state.filename}\n                        onClick={this.classifyLocalImage}\n                        isLoading={this.state.isClassifying}\n                        text=\"Detect\"\n                        loadingText=\"Detecting...\"\n                      />\n                    </div>\n                  </Fragment>\n                }\n              </Tab>\n            </Tabs>\n            </div>\n          </Collapse>\n          { this.state.predictions.length > 0 &&\n            <div className=\"classification-results\">\n              <h3 style={{color: '#fff', fontWeight:\"bold\"}}>Who's that Pok&eacute;mon?</h3>\n              <canvas ref=\"canvas\" width={CANVAS_SIZE} height={CANVAS_SIZE} />\n              <br />\n              <ListGroup>\n              {this.state.predictions.map((category) => {\n                  return (\n                    <ListGroup.Item key={category.className} >\n                      <strong>{category.className}</strong> {category.probability}%\n                    </ListGroup.Item>\n                  );\n              })}\n\n                <Modal1 />\n\n              </ListGroup>\n            </div>\n          }\n          </Fragment>\n        }\n      </div>\n    );\n  }\n}\n","\nimport React from 'react';\nimport './NotFound.css';\n\n/**\n * Rendered when a route is not found (404).\n */\nexport default () =>\n  <div className=\"NotFound\">\n    {/* <img src=\"./imgs/pokeball.png\" className=\"notfound-logo\" alt=\"pokeball\" /> */}\n    <br></br>\n    <h3>The page you were looking for is not here yet.</h3>\n    <img src=\"./favicon_io/android-chrome-192x192.png\" className=\"notfound-logo\" alt=\"pokeball\" />\n    <br></br>\n    <br></br>\n    <a href={process.env.PUBLIC_URL+\"/\"}>Go Home</a>\n    <br></br>\n\n  </div>;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport About from './pages/About';\n//import List from './pages/List';\nimport Detect from './pages/Detect';\nimport NotFound from './pages/NotFound';\n\nexport default ({ childProps }) =>\n  <Switch>\n    <Route path={process.env.PUBLIC_URL+\"/\"} exact component={Detect} props={childProps} />\n    {/* <Route path=\"/list\" exact component={List} props={childProps} /> */}\n    <Route path={process.env.PUBLIC_URL+\"/about\"} exact component={About} props={childProps} />\n    <Route component={NotFound} />\n  </Switch>;","import React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\n\n/**\n * Class to handle the rendering of a dismissiable alert to use for things like errors.\n * @extends React.Component\n */\nclass AlertDismissable extends Component {\n\n  render() {\n    if (this.props.show) {\n      return (\n        <Alert variant={this.props.variant || 'danger'} onClose={this.props.onClose} dismissible>\n          { this.props.title && <h5><strong>{this.props.title}</strong></h5> }\n          <div dangerouslySetInnerHTML={{ __html: this.props.message }} />\n        </Alert>\n      );\n    }\n    return null;\n  }\n}\n\nexport default AlertDismissable;","import React, {Component} from 'react';\nimport {Container, Nav, Navbar} from 'react-bootstrap';\nimport {Link, withRouter} from 'react-router-dom';\nimport Routes from './Routes';\n//import logo from './logo.svg';\nimport './App.css';\n\nimport AlertDismissable from './components/AlertDismissable';\nimport { PropTypes } from 'prop-types';\n\n\nclass App extends Component {\n\n  /*\n\n  add ability to update model here \n\n  */\n  constructor(props) {\n    super(props);\n    const reloadMsg = `\n      New content is available.<br />\n      Please <a href='javascript:location.reload();'>reload</a>.<br />\n      <small>If reloading doesn't work, close all tabs/windows of this web application,\n      and then reopen the application.</small>\n    `;\n    this.state = {\n      showUpdateAlert: true,\n      reloadMsg: reloadMsg\n    };\n  }\n\n  dismissUpdateAlert = event => {\n    this.setState({ showUpdateAlert: false });\n  }\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <Navbar collapseOnSelect className=\"app-nav-bar\" variant=\"dark\" expand=\"lg\">\n            <Navbar.Brand href=\"/\">DetectivePoké &#x1F50D; </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"\">\n                <Link className=\"nav-link\" to={process.env.PUBLIC_URL+\"/\"}>Detect</Link>\n                <Link className=\"nav-link\" to={process.env.PUBLIC_URL+\"/list\"}>PokéList</Link>\n                <Link className=\"nav-link\" to={process.env.PUBLIC_URL+\"/about\"}>About</Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          { this.props.updateAvailable && this.state.showUpdateAlert &&\n              <div style={{paddingTop: '10px'}}>\n                <AlertDismissable\n                  title=\"\"\n                  variant=\"info\"\n                  message={this.state.reloadMsg}\n                  show={this.props.updateAvailable && this.state.showUpdateAlert}\n                  onClose={this.dismissUpdateAlert} />\n              </div>\n          }\n        </Container>\n        <Container>\n          <Routes />\n        </Container>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  updateAvailable: PropTypes.bool.isRequired,\n};\n\n//export default App;\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass Index extends Component {\n  state = {\n    contentCached: false,\n    updateAvailable: false,\n  };\n\n  componentDidMount() {\n    const config = {\n      onUpdate: this.handleUpdate,\n    };\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.register(config);\n  }\n\n  render() {\n    return (\n      <Router>\n        <App updateAvailable={this.state.updateAvailable} />\n      </Router>\n    );\n  }\n\n  handleUpdate = (registration) => {\n    const waitingServiceWorker = registration.waiting;\n\n    if (waitingServiceWorker) {\n      waitingServiceWorker.postMessage({ type: 'SKIP_WAITING' });\n    }\n    this.setState({ updateAvailable: true});\n  }\n}\n\nReactDOM.render(\n  <Index />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}